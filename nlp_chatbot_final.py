# -*- coding: utf-8 -*-
"""NLP_Chatbot_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YFdc0E_t7rpM4D6I0RQIIQHR4fOYmwFC
"""

import numpy as np
import nltk
import string
import random
from nltk.stem import WordNetLemmatizer

nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')

lemmer = WordNetLemmatizer()

def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]

remove_punc_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punc_dict)))

greet_inputs = ('hello', 'hi', 'whassup', 'how are you?')
greet_responses = ['Hello!', 'Hi there!', 'Hey!', 'I am doing well, thank you. How about you?']

def greet(sentence):
    for word in sentence.split():
        if word.lower() in greet_inputs:
            return random.choice(greet_responses)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def response(user_response):
    robo1_response = ''
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sentence_tokens)
    vals = cosine_similarity(TfidfVec.transform([user_response]), tfidf)
    idx = vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    reg_tfidf = flat[-2]
    if reg_tfidf == 0:
        robo1_response = robo1_response + "I am sorry, I am unable to understand you!"
        return robo1_response
    else:
        robo1_response = robo1_response + sentence_tokens[idx]
        return robo1_response

flag = True
print('Hey there! Start typing your text after greeting to talk to me. To end the conversation, type "bye".')

# Read data file
with open('/content/data.txt', 'r', errors='ignore') as f:
    raw_doc = f.read()

raw_doc = raw_doc.lower()
sentence_tokens = nltk.sent_tokenize(raw_doc)
word_tokens = nltk.word_tokenize(raw_doc)

try:
    while flag:
        user_response = input()
        user_response = user_response.lower()
        if user_response != 'bye':
            if user_response in greet_inputs:
                print('bot: ' + greet(user_response))
            else:
                sentence_tokens.append(user_response)
                word_tokens = word_tokens + nltk.word_tokenize(user_response)
                final_words = list(set(word_tokens))
                print('bot:', response(user_response))
                sentence_tokens.remove(user_response)
        else:
            flag = False
            print('bot: Goodbye! Have a nice day.')
except KeyboardInterrupt:
    print('\nConversation ended by user.')